{
    "docs": [
        {
            "location": "/",
            "text": "Overview\n\u00b6\n\n\n\nArend (aka vclang) is a theorem prover based on \nHomotopy Type Theory\n.\nFor the installation instructions, see \nthis section\n.\nThe section \nLanguage Reference\n contains a description of the Arend language.\nFor a tutorial, see \nthis section\n.",
            "title": "Overview"
        },
        {
            "location": "/getting-started/",
            "text": "Getting Started\n\u00b6\n\n\n\nYou need to have \nJRE 8\n installed on your computer to use Arend.\nArend is available either as an \nIntelliJ IDEA\n plugin (see \nthis section\n for the installation instructions) or as a console applications (see \nthis section\n for the installation instructions).\n\n\nIntelliJ IDEA Plugin\n\u00b6\n\n\nTo install the IntelliJ IDEA plugin, follow the instructions below.\n\n\n\n\nDownload (either community or ultimate version of) \nIntelliJ IDEA\n.\n\n\nDownload the \nArend plugin\n. You can also get the latest version of the plugin by following instructions on \nthis page\n.\n\n\nRun Intellij IDEA, choose either \nConfigure | Plugins\n if you are on a \nWelcome screen\n or \nFile | Settings\n from the main menu if a project is open, go to \nPlugins\n tab, click \nInstall plugin from disk\n, choose downloaded \nintellij-vclang.zip\n file, restart Intellij IDEA.\n\n\n\n\nLet's create our first Arend project.\nRun Intellij IDEA and choose either \nCreate New Project\n if you are on a \nWelcome screen\n or \nFile | New | Project\n from the main menu if a project is open.\nChoose \nVclang\n in the list on the left, click \nNext\n, click \nFinish\n.\nYou should get a new project which contains (among other files) a file \n<project_name>.vcl\n and an empty directory \nsrc\n.\nThe \nvcl\n file contains a description of the project.\n\n\nCreate a new file \nexample.vc\n in \nsrc\n directory.\nAdd the following line to this file:\n\n\n\\func f => 0\n\n\n\n\nRight click \nexample.vc\n file and choose \nRun 'Typecheck example'\n in the popup menu (you can also use shortcut \n<Alt+Shift+F10>\n).\nYou should see the message \nAll Tests Passed\n, which indicates that the typechecking was successful.\nModify the file as follows:\n\n\n\\func f : Nat -> Nat => 0\n\n\n\n\nRun the typechecking again (you can use shortcut \n<Shift+F10>\n for this).\nYou should see the following error message:\n\n\n[ERROR] example.vc:1:25: Type mismatch\n  Expected type: Nat -> Nat\n    Actual type: Nat\n  In: 0\n  While processing: f\n\n\n\n\nYou can read more about IntelliJ IDEA \nhere\n.\nTo learn more about Arend, see the \ntutorial\n and the \nlanguage reference\n.\n\n\nConsole Application\n\u00b6\n\n\nTo install the console application, follow the instructions below.\n\n\n\n\nDownload the vclang \njar file\n. You can also get the latest version of the plugin by following instructions on \nthis page\n.\n\n\nRun \njava -jar vclang.jar\n to check that everything is alright. You should see the following output:\n\n$ java -jar vclang.jar\n[INFO] Loading library prelude\n[INFO] Loaded library prelude\nNothing to load\n\n\nTo see command line options, run \njava -jar vclang.jar --help\n.\n\n\n\n\nLet's create our first Arend project.\nCreate a directory for your project:\n\n\n$ mkdir testProject\n$ cd testProject\n\n\n\n\nCreate file \nmyProject.vcl\n inside this directory.\nThis file contains the description of your project.\nCurrently, we just need to specify the location of source files of your project.\n\n\nAdd the following line to \nmyProject.vcl\n:\n\n\nsourcesDir: src\n\n\n\n\nCreate directory \nsrc\n which will contain source files for this project.\nCreate a file \nexample.vc\n inside \nsrc\n with the following content:\n\n\n\\func f => 0\n\n\n\n\nRun \njava -jar $vclang $myProject\n, where \n$vclang\n is the path to \nvclang.jar\n and \n$myProject\n is the path to \nmyProject.vcl\n.\nYou should see the following output:\n\n\n[INFO] Loading library prelude\n[INFO] Loaded library prelude\n[INFO] Loading library myProject\n[INFO] Loaded library myProject\n--- Typechecking myProject ---\n[ ] example\n--- Done ---\n\n\n\n\nThis means that module \nexample\n was successfully typechecked.\nModify file \nexample.vc\n as follows:\n\n\n\\func f : Nat -> Nat => 0\n\n\n\n\nIf you run \njava -jar $vclang $myProject\n again, it should produce the following error message:\n\n\n[INFO] Loading library prelude\n[INFO] Loaded library prelude\n[INFO] Loading library myProject\n[INFO] Loaded library myProject\n--- Typechecking myProject ---\n[ERROR] example:1:25: Type mismatch\n  Expected type: Nat -> Nat\n    Actual type: Nat\n  In: 0\n  While processing: f\n[\u2717] example\nNumber of modules with errors: 1\n--- Done ---",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/#intellij-idea-plugin",
            "text": "To install the IntelliJ IDEA plugin, follow the instructions below.   Download (either community or ultimate version of)  IntelliJ IDEA .  Download the  Arend plugin . You can also get the latest version of the plugin by following instructions on  this page .  Run Intellij IDEA, choose either  Configure | Plugins  if you are on a  Welcome screen  or  File | Settings  from the main menu if a project is open, go to  Plugins  tab, click  Install plugin from disk , choose downloaded  intellij-vclang.zip  file, restart Intellij IDEA.   Let's create our first Arend project.\nRun Intellij IDEA and choose either  Create New Project  if you are on a  Welcome screen  or  File | New | Project  from the main menu if a project is open.\nChoose  Vclang  in the list on the left, click  Next , click  Finish .\nYou should get a new project which contains (among other files) a file  <project_name>.vcl  and an empty directory  src .\nThe  vcl  file contains a description of the project. \nCreate a new file  example.vc  in  src  directory.\nAdd the following line to this file:  \\func f => 0  Right click  example.vc  file and choose  Run 'Typecheck example'  in the popup menu (you can also use shortcut  <Alt+Shift+F10> ).\nYou should see the message  All Tests Passed , which indicates that the typechecking was successful.\nModify the file as follows:  \\func f : Nat -> Nat => 0  Run the typechecking again (you can use shortcut  <Shift+F10>  for this).\nYou should see the following error message:  [ERROR] example.vc:1:25: Type mismatch\n  Expected type: Nat -> Nat\n    Actual type: Nat\n  In: 0\n  While processing: f  You can read more about IntelliJ IDEA  here .\nTo learn more about Arend, see the  tutorial  and the  language reference .",
            "title": "IntelliJ IDEA Plugin"
        },
        {
            "location": "/getting-started/#console-application",
            "text": "To install the console application, follow the instructions below.   Download the vclang  jar file . You can also get the latest version of the plugin by following instructions on  this page .  Run  java -jar vclang.jar  to check that everything is alright. You should see the following output: $ java -jar vclang.jar\n[INFO] Loading library prelude\n[INFO] Loaded library prelude\nNothing to load \nTo see command line options, run  java -jar vclang.jar --help .   Let's create our first Arend project.\nCreate a directory for your project:  $ mkdir testProject\n$ cd testProject  Create file  myProject.vcl  inside this directory.\nThis file contains the description of your project.\nCurrently, we just need to specify the location of source files of your project. \nAdd the following line to  myProject.vcl :  sourcesDir: src  Create directory  src  which will contain source files for this project.\nCreate a file  example.vc  inside  src  with the following content:  \\func f => 0  Run  java -jar $vclang $myProject , where  $vclang  is the path to  vclang.jar  and  $myProject  is the path to  myProject.vcl .\nYou should see the following output:  [INFO] Loading library prelude\n[INFO] Loaded library prelude\n[INFO] Loading library myProject\n[INFO] Loaded library myProject\n--- Typechecking myProject ---\n[ ] example\n--- Done ---  This means that module  example  was successfully typechecked.\nModify file  example.vc  as follows:  \\func f : Nat -> Nat => 0  If you run  java -jar $vclang $myProject  again, it should produce the following error message:  [INFO] Loading library prelude\n[INFO] Loaded library prelude\n[INFO] Loading library myProject\n[INFO] Loaded library myProject\n--- Typechecking myProject ---\n[ERROR] example:1:25: Type mismatch\n  Expected type: Nat -> Nat\n    Actual type: Nat\n  In: 0\n  While processing: f\n[\u2717] example\nNumber of modules with errors: 1\n--- Done ---",
            "title": "Console Application"
        },
        {
            "location": "/tutorial/",
            "text": "Tutorial\n\u00b6\n\n\n\nHere is the data type for booleans in Arend:\n\n\n\\import Data.Unit\n\\import Data.Empty\n\n\\data Bool | true | false\n\n\\func True (b : Bool) : \\Prop\n    | true => Unit\n    | false => Empty\n\n\\func not (b : Bool) : Bool\n    | true => false\n    | false => true\n\n\\func if {A : \\Type} (b : Bool) (then else : A) : A \\elim b\n    | true => then\n    | false => else\n\n\n\n\nHere is some fine algebra for you reading pleasure:\n\n\n\\import Data.Bool\n\n\\class Semigroup {\n  | X : \\Type0\n  | op : X -> X -> X\n  | assoc : \\Pi (x y z : X) -> op (op x y) z = op x (op y z)\n}\n\n\\func xor-semigroup => \\new Semigroup { X => Bool | op => xor | assoc => {?} }\n\n\\func and-semigroup => \\new Semigroup { X => Bool | op => and | assoc => {?} }\n\n\\class Monoid {\n  | S : Semigroup\n  | id : S.X\n  | lunit : \\Pi (x : S.X) -> S.op id x = x\n  | runit : \\Pi (x : S.X) -> S.op x id = x\n}\n\n\\func xor-monoid => \\new Monoid {\n  | S => xor-semigroup\n  | id => false\n  | lunit => {?}\n  | runit => {?}\n}\n\n\\func and-monoid => \\new Monoid {\n  | S => and-semigroup\n  | id => true\n  | lunit => {?}\n  | runit => {?}\n}\n\n\\class Group {\n  | M : Monoid\n  | inv : M.S.X -> M.S.X\n  | linv : \\Pi (x : M.S.X) -> M.S.op (inv x) x = M.id\n  | rinv : \\Pi (x : M.S.X) -> M.S.op x (inv x) = M.id\n}\n\n\\func xor-group => \\new Group {\n  | M => xor-monoid\n  | inv => {?}\n  | linv => {?}\n  | rinv => {?}\n}\n\n\\class AbelianGroup {\n  | G : Group\n  | comm : \\Pi (x y : G.M.S.X) -> G.M.S.op x y = G.M.S.op y x\n}\n\n\\func xor-abelian => \\new AbelianGroup {\n  | G => xor-group\n  | comm => {?}\n}\n\n{-\n\\class Ring {\n  | A : AbelianGroup\n  | M : Monoid { S : Semigroup { X => A.G.M.S.X } }\n  | ldistr : \\Pi (x y z : A.G.M.S.X) -> M.S.op x (A.G.M.S.op y z) = A.G.M.S.op (M.S.op x y) (M.S.op x z)\n  | rdistr : \\Pi (x y z : A.G.M.S.X) -> M.S.op (A.G.M.S.op y z) x = A.G.M.S.op (M.S.op y x) (M.S.op z x)\n}\n\n\\func xor-ring => \\new Ring {\n  | A => xor-abelian\n  | M => and-monoid\n  | distr => {?}\n}\n\n\\func mul-zero (R : Ring) (x : R.A.G.M.S.X) : M.S.op x R.A.G.M.id = R.A.G.M.id\n    => {?}\n-}",
            "title": "Tutorial"
        },
        {
            "location": "/language-reference/definitions/",
            "text": "There are three kinds of definitions in Arend.\n\n\nFunction\n\u00b6\n\n\nUse the \n\\func\n keyword.\n\n\nData\n\u00b6\n\n\nUse the \n\\data\n keyword.\n\n\nClass\n\u00b6\n\n\nUse the \n\\class\n keyword.",
            "title": "Definitions"
        },
        {
            "location": "/language-reference/definitions/#function",
            "text": "Use the  \\func  keyword.",
            "title": "Function"
        },
        {
            "location": "/language-reference/definitions/#data",
            "text": "Use the  \\data  keyword.",
            "title": "Data"
        },
        {
            "location": "/language-reference/definitions/#class",
            "text": "Use the  \\class  keyword.",
            "title": "Class"
        }
    ]
}