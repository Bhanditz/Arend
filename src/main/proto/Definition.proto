syntax = "proto3";

package vclang.compiled;
option java_package = "com.jetbrains.jetpad.vclang.module.caching.serialization";
option java_outer_classname = "DefinitionProtos";

import "Expression.proto";
import "Level.proto";


message Definition {
    Status status = 1;
    int32 this_class_ref = 3;
    oneof definition_data {
        ClassData class = 5;
        DataData data = 6;
        FunctionData function = 7;
    }

    message Clause {
        repeated Pattern pattern = 1;
        Expression expression = 2;
    }

    message Pattern {
        oneof kind {
            Binding binding = 4;
            ConstructorRef constructor = 5;
            Empty empty = 6;
        }

        message Binding {
            SingleParameter var = 1;
        }
        message ConstructorRef {
            Sort sortArgument = 4;
            repeated Expression data_type_argument = 5;
            int32 constructor_ref = 1;
            repeated Pattern pattern = 3;
        }
        message Empty {
        }
    }

    message ClassifyingFields {
        repeated int32 field_ref = 1;
    }
    message ClassData {
        repeated int32 super_class_ref = 4;
        repeated Field personal_field = 10;
        int32 enclosing_this_field_ref = 6;
        repeated int32 field_ref = 8;
        map<int32, Implementation> implementations = 9;
        Sort sort = 7;

        message Field {
            string name = 3;
            SingleParameter this_param = 1;
            Expression type = 2;
        }

        message Implementation {
            SingleParameter this_param = 1;
            Expression term = 2;
        }
    }
    message DataData {
        repeated Telescope param = 2;
        Sort sort = 7;
        map<string, Constructor> constructors = 3;
        bool matches_on_interval = 5;
        repeated bool covariant_parameter = 8;

        message Constructor {
            repeated Pattern pattern = 5;
            repeated Telescope param = 2;
            repeated Clause clause = 6;
            Body conditions = 4;
        }
    }
    message FunctionData {
        repeated Telescope param = 2;
        Expression type = 5;
        Body body = 6;
    }

    enum Status {
        HEADER_HAS_ERRORS = 0;
        BODY_HAS_ERRORS = 1;
        HEADER_NEEDS_TYPE_CHECKING = 2;
        BODY_NEEDS_TYPE_CHECKING = 3;
        HAS_ERRORS = 4;
        NO_ERRORS = 5;
    }
}

message Body {
    oneof kind {
        ElimTree elim_tree = 1;
        IntervalElim interval_elim = 2;
    }

    message ExpressionPair {
        Expression left = 1;
        Expression right = 2;
    }
    message IntervalElim {
        repeated Telescope param = 3;
        repeated ExpressionPair case = 1;
        ElimTree otherwise = 2;
    }
}
